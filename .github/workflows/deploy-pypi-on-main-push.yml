name: Deploy PyPI on Main Push

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry and Twine
        run: |
          pip install poetry twine

      - name: Update package name to zylo-docs for staging
        run: |
          echo "🛠 Changing package name in pyproject.toml to 'zylo-docs'"
          sed -i 's/^name = "zylib-test"/name = "zylo-docs"/' pyproject.toml

      - name: Deploy to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          set -e

          echo "--- 기존 dist 삭제 ---"
          rm -rf ./dist

          echo "--- Git 설정 ---"
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

          echo "--- 버전 올리기 ---"
          poetry version patch
          VERSION=$(poetry version -s)
          echo "➡️ 새 버전: $VERSION"

          echo "--- 변경사항 커밋 ---"
          # pyproject.toml 및 poetry.lock 변경사항을 커밋합니다.
          git add pyproject.toml
          if [ -f poetry.lock ]; then
            git add poetry.lock
          fi
          git commit -m "🔖 Bump version to $VERSION for PyPI release [skip ci]" || echo "No changes to commit"

          echo "--- 커밋 푸시 ---"
          # GITHUB_TOKEN을 사용하여 현재 브랜치(staging)로 푸시합니다.
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:staging

          echo "--- 빌드 ---"
          poetry build

          echo "--- PyPI 업로드 ---"
          twine upload dist/*

          echo "✅ 배포 완료!"
